/* Auto-generated by genmsg_cpp for file /home/hieu/ros_workspace/sonar_node/srv/FindPingers.srv */
#ifndef SONAR_NODE_SERVICE_FINDPINGERS_H
#define SONAR_NODE_SERVICE_FINDPINGERS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "sonar_node/PingerArray.h"

namespace sonar_node
{
template <class ContainerAllocator>
struct FindPingersRequest_ : public ros::Message
{
  typedef FindPingersRequest_<ContainerAllocator> Type;

  FindPingersRequest_()
  : PingerIDs()
  {
  }

  FindPingersRequest_(const ContainerAllocator& _alloc)
  : PingerIDs(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _PingerIDs_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  PingerIDs;


  ROS_DEPRECATED uint32_t get_PingerIDs_size() const { return (uint32_t)PingerIDs.size(); }
  ROS_DEPRECATED void set_PingerIDs_size(uint32_t size) { PingerIDs.resize((size_t)size); }
  ROS_DEPRECATED void get_PingerIDs_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->PingerIDs; }
  ROS_DEPRECATED void set_PingerIDs_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->PingerIDs = vec; }
private:
  static const char* __s_getDataType_() { return "sonar_node/FindPingersRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "781bdbee5ed036c76f9f474dec160ab2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3fc273c2cde0e4501b5b4f0338ae74b2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8[] PingerIDs\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, PingerIDs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, PingerIDs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(PingerIDs);
    return size;
  }

  typedef boost::shared_ptr< ::sonar_node::FindPingersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar_node::FindPingersRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FindPingersRequest
typedef  ::sonar_node::FindPingersRequest_<std::allocator<void> > FindPingersRequest;

typedef boost::shared_ptr< ::sonar_node::FindPingersRequest> FindPingersRequestPtr;
typedef boost::shared_ptr< ::sonar_node::FindPingersRequest const> FindPingersRequestConstPtr;


template <class ContainerAllocator>
struct FindPingersResponse_ : public ros::Message
{
  typedef FindPingersResponse_<ContainerAllocator> Type;

  FindPingersResponse_()
  : PingerArray()
  {
  }

  FindPingersResponse_(const ContainerAllocator& _alloc)
  : PingerArray(_alloc)
  {
  }

  typedef  ::sonar_node::PingerArray_<ContainerAllocator>  _PingerArray_type;
   ::sonar_node::PingerArray_<ContainerAllocator>  PingerArray;


private:
  static const char* __s_getDataType_() { return "sonar_node/FindPingersResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "78f7d9f5ec54ba42358394cc74c0b2ee"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3fc273c2cde0e4501b5b4f0338ae74b2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "sonar_node/PingerArray PingerArray\n\
\n\
\n\
================================================================================\n\
MSG: sonar_node/PingerArray\n\
sonar_node/Pinger[] Pingers\n\
\n\
================================================================================\n\
MSG: sonar_node/Pinger\n\
int8 Id           # 0 is correct pinger, 1 is incorrect pinger\n\
float64 Heading\n\
float64 Magnitude\n\
float64 TimeSince\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, PingerArray);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, PingerArray);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(PingerArray);
    return size;
  }

  typedef boost::shared_ptr< ::sonar_node::FindPingersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar_node::FindPingersResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct FindPingersResponse
typedef  ::sonar_node::FindPingersResponse_<std::allocator<void> > FindPingersResponse;

typedef boost::shared_ptr< ::sonar_node::FindPingersResponse> FindPingersResponsePtr;
typedef boost::shared_ptr< ::sonar_node::FindPingersResponse const> FindPingersResponseConstPtr;

struct FindPingers
{

typedef FindPingersRequest Request;
typedef FindPingersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FindPingers
} // namespace sonar_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sonar_node::FindPingersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "781bdbee5ed036c76f9f474dec160ab2";
  }

  static const char* value(const  ::sonar_node::FindPingersRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x781bdbee5ed036c7ULL;
  static const uint64_t static_value2 = 0x6f9f474dec160ab2ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar_node::FindPingersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar_node/FindPingersRequest";
  }

  static const char* value(const  ::sonar_node::FindPingersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sonar_node::FindPingersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8[] PingerIDs\n\
\n\
";
  }

  static const char* value(const  ::sonar_node::FindPingersRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sonar_node::FindPingersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "78f7d9f5ec54ba42358394cc74c0b2ee";
  }

  static const char* value(const  ::sonar_node::FindPingersResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x78f7d9f5ec54ba42ULL;
  static const uint64_t static_value2 = 0x358394cc74c0b2eeULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar_node::FindPingersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar_node/FindPingersResponse";
  }

  static const char* value(const  ::sonar_node::FindPingersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sonar_node::FindPingersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar_node/PingerArray PingerArray\n\
\n\
\n\
================================================================================\n\
MSG: sonar_node/PingerArray\n\
sonar_node/Pinger[] Pingers\n\
\n\
================================================================================\n\
MSG: sonar_node/Pinger\n\
int8 Id           # 0 is correct pinger, 1 is incorrect pinger\n\
float64 Heading\n\
float64 Magnitude\n\
float64 TimeSince\n\
\n\
";
  }

  static const char* value(const  ::sonar_node::FindPingersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sonar_node::FindPingersRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PingerIDs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FindPingersRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sonar_node::FindPingersResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.PingerArray);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FindPingersResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sonar_node::FindPingers> {
  static const char* value() 
  {
    return "3fc273c2cde0e4501b5b4f0338ae74b2";
  }

  static const char* value(const sonar_node::FindPingers&) { return value(); } 
};

template<>
struct DataType<sonar_node::FindPingers> {
  static const char* value() 
  {
    return "sonar_node/FindPingers";
  }

  static const char* value(const sonar_node::FindPingers&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sonar_node::FindPingersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3fc273c2cde0e4501b5b4f0338ae74b2";
  }

  static const char* value(const sonar_node::FindPingersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sonar_node::FindPingersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar_node/FindPingers";
  }

  static const char* value(const sonar_node::FindPingersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sonar_node::FindPingersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3fc273c2cde0e4501b5b4f0338ae74b2";
  }

  static const char* value(const sonar_node::FindPingersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sonar_node::FindPingersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar_node/FindPingers";
  }

  static const char* value(const sonar_node::FindPingersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SONAR_NODE_SERVICE_FINDPINGERS_H

