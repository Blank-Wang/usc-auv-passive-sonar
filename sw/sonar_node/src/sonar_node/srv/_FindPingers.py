"""autogenerated by genmsg_py from FindPingersRequest.msg. Do not edit."""
import roslib.message
import struct


class FindPingersRequest(roslib.message.Message):
  _md5sum = "781bdbee5ed036c76f9f474dec160ab2"
  _type = "sonar_node/FindPingersRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[] PingerIDs

"""
  __slots__ = ['PingerIDs']
  _slot_types = ['uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       PingerIDs
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FindPingersRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PingerIDs is None:
        self.PingerIDs = ''
    else:
      self.PingerIDs = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.PingerIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.PingerIDs = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.PingerIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.PingerIDs = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from FindPingersResponse.msg. Do not edit."""
import roslib.message
import struct

import sonar_node.msg

class FindPingersResponse(roslib.message.Message):
  _md5sum = "78f7d9f5ec54ba42358394cc74c0b2ee"
  _type = "sonar_node/FindPingersResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sonar_node/PingerArray PingerArray


================================================================================
MSG: sonar_node/PingerArray
sonar_node/Pinger[] Pingers

================================================================================
MSG: sonar_node/Pinger
int8 Id           # 0 is correct pinger, 1 is incorrect pinger
float64 Heading
float64 Magnitude
float64 TimeSince

"""
  __slots__ = ['PingerArray']
  _slot_types = ['sonar_node/PingerArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       PingerArray
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FindPingersResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PingerArray is None:
        self.PingerArray = sonar_node.msg.PingerArray()
    else:
      self.PingerArray = sonar_node.msg.PingerArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.PingerArray.Pingers)
      buff.write(_struct_I.pack(length))
      for val1 in self.PingerArray.Pingers:
        _x = val1
        buff.write(_struct_b3d.pack(_x.Id, _x.Heading, _x.Magnitude, _x.TimeSince))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.PingerArray is None:
        self.PingerArray = sonar_node.msg.PingerArray()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PingerArray.Pingers = []
      for i in xrange(0, length):
        val1 = sonar_node.msg.Pinger()
        _x = val1
        start = end
        end += 25
        (_x.Id, _x.Heading, _x.Magnitude, _x.TimeSince,) = _struct_b3d.unpack(str[start:end])
        self.PingerArray.Pingers.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.PingerArray.Pingers)
      buff.write(_struct_I.pack(length))
      for val1 in self.PingerArray.Pingers:
        _x = val1
        buff.write(_struct_b3d.pack(_x.Id, _x.Heading, _x.Magnitude, _x.TimeSince))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.PingerArray is None:
        self.PingerArray = sonar_node.msg.PingerArray()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PingerArray.Pingers = []
      for i in xrange(0, length):
        val1 = sonar_node.msg.Pinger()
        _x = val1
        start = end
        end += 25
        (_x.Id, _x.Heading, _x.Magnitude, _x.TimeSince,) = _struct_b3d.unpack(str[start:end])
        self.PingerArray.Pingers.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b3d = struct.Struct("<b3d")
class FindPingers(roslib.message.ServiceDefinition):
  _type          = 'sonar_node/FindPingers'
  _md5sum = '3fc273c2cde0e4501b5b4f0338ae74b2'
  _request_class  = FindPingersRequest
  _response_class = FindPingersResponse
